::::::::::::::
./src/main/java/com/example/ui/controller/LoginController.java
::::::::::::::
package com.example.ui.controller;

import org.springframework.beans.factory.annotation.Value;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.client.RestTemplate;
import org.springframework.http.ResponseEntity;
import java.util.Map;

/**
 * Controlador de Login
 * =================
 * 
 * ACESSO AO SISTEMA:
 * ---------------
 * 1. Validação:
 *    - Login existente na base
 *    - Senha correta
 *    - Perfil ativo
 * 
 * 2. Redirecionamento:
 *    - CLIENTE: para e-commerce
 *    - VENDEDOR: para PDV
 * 
 * RESTRIÇÕES:
 * ---------
 * - Sem cadastro de novos usuários
 * - Perfis pré-definidos
 * - Acessos limitados por perfil
 * 
 * SEGURANÇA:
 * --------
 * - Validação de CPF
 * - Dados criptografados
 * - Sessão por perfil
 */
@Controller
public class LoginController {

    private final RestTemplate restTemplate = new RestTemplate();

    private static final String AUTH_SERVICE_URL = "http://auth-service:8082";

    @Value("${auth.mock-login:false}") // Pega do properties
    private boolean mockLogin;

    @GetMapping("/login")
    public String loginPage() {
        return "login";
    }

    @PostMapping("/login")
    public String login(@RequestParam String username, 
                        @RequestParam String password, 
                        Model model) {
        try {
            if (mockLogin) {
                // MODO MOCK: apenas para desenvolvimento inicial
                if ("admin".equals(username) && "admin123".equals(password)) {
                    return "redirect:/vehicles"; // sucesso mockado
                } else {
                    model.addAttribute("error", "Usuário ou senha inválidos (modo mock)");
                    return "login"; // volta para login com erro
                }
            } else {
                // MODO REAL: valida usando o auth-service
                ResponseEntity<Map> response = restTemplate.postForEntity(
                    AUTH_SERVICE_URL + "/api/auth/login?username={username}&password={password}",
                    null,
                    Map.class,
                    username,
                    password
                );
                
                if (response.getBody() != null && Boolean.TRUE.equals(response.getBody().get("success"))) {
                    return "redirect:/vehicles"; // sucesso real
                }
            }
        } catch (Exception e) {
            e.printStackTrace();
        }

        // Se chegar aqui, erro na autenticação
        model.addAttribute("error", "Usuário ou senha inválidos");
        return "login";
    }
}
::::::::::::::
./src/main/java/com/example/ui/controller/UserViewController.java
::::::::::::::
package com.example.ui.controller;

import com.example.ui.service.UserUIService;
import jakarta.servlet.http.HttpSession;
import lombok.RequiredArgsConstructor;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.RequestMapping;

@Controller
@RequestMapping("/users")
@RequiredArgsConstructor
public class UserViewController {

    private final UserUIService userService;

    @GetMapping
    public String listUsers(Model model, HttpSession session) {
        String token = (String) session.getAttribute("token");
        String role = (String) session.getAttribute("role");

        if (!"VENDEDOR".equals(role)) {
            return "redirect:/vehicles";
        }

        userService.getAllUsers(token)
                .subscribe(users -> model.addAttribute("users", users));

        return "user/list";
    }
} ::::::::::::::
./src/main/java/com/example/ui/controller/VehicleViewController.java
::::::::::::::
package com.example.ui.controller;

import com.example.ui.service.VehicleUIService;
import jakarta.servlet.http.HttpSession;
import lombok.RequiredArgsConstructor;
import org.springframework.core.env.Environment;
import org.springframework.security.access.prepost.PreAuthorize;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.*;
import reactor.core.publisher.Mono;

@Controller
@RequiredArgsConstructor
@RequestMapping("/vehicles")
public class VehicleViewController {

    private final VehicleUIService vehicleService;
    private final Environment environment; // <-- Adicionado para acessar o profile ativo

    @GetMapping
    @PreAuthorize("hasAnyRole('USER', 'ADMIN', 'VENDOR')")
    public String listVehicles(Model model, HttpSession session) {
        String token = (String) session.getAttribute("token");

        if (isProdProfile() && token == null) {
            return "redirect:/login";
        }

        vehicleService.getAvailableVehicles(token != null ? token : "")
                .onErrorResume(ex -> isDevProfile() ? Mono.empty() : Mono.error(ex)) // <-- ignora erro só no DEV
                .subscribe(vehicles -> model.addAttribute("vehicles", vehicles));

        return "vehicle/list";
    }

    @GetMapping("/{id}")
    @PreAuthorize("hasAnyRole('USER', 'ADMIN', 'VENDOR')")
    public String vehicleDetails(@PathVariable Long id, Model model, HttpSession session) {
        String token = (String) session.getAttribute("token");

        if (isProdProfile() && token == null) {
            return "redirect:/login";
        }

        vehicleService.getVehicleDetails(id, token != null ? token : "")
                .onErrorResume(ex -> isDevProfile() ? Mono.empty() : Mono.error(ex))
                .subscribe(vehicle -> model.addAttribute("vehicle", vehicle));

        return "vehicle/details";
    }

    @GetMapping("/manage")
    @PreAuthorize("hasRole('VENDOR')")
    public String manageVehicles() {
        return "vehicle/manage";
    }

    @GetMapping("/admin")
    @PreAuthorize("hasRole('ADMIN')")
    public String adminPanel() {
        return "vehicle/admin";
    }

    private boolean isDevProfile() {
        return isProfileActive("dev");
    }

    private boolean isProdProfile() {
        return isProfileActive("prod");
    }

    private boolean isProfileActive(String profile) {
        String[] activeProfiles = environment.getActiveProfiles();
        for (String activeProfile : activeProfiles) {
            if (activeProfile.equalsIgnoreCase(profile)) {
                return true;
            }
        }
        return false;
    }
}
::::::::::::::
./src/main/java/com/example/ui/controller/CartController.java
::::::::::::::
package com.example.ui.controller;

import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.client.RestTemplate;
import org.springframework.web.servlet.mvc.support.RedirectAttributes;
import jakarta.servlet.http.HttpSession;

@Controller
@RequestMapping("/cart")
public class CartController {
    private final RestTemplate restTemplate = new RestTemplate();
    private static final String COMMERCE_SERVICE_URL = "http://commerce-service:8081";

    @GetMapping
    public String viewCart(Model model, HttpSession session) {
        try {
            Object cart = restTemplate.getForObject(
                COMMERCE_SERVICE_URL + "/api/cart",
                Object.class
            );
            model.addAttribute("cart", cart);
            return "cart";
        } catch (Exception e) {
            model.addAttribute("error", "Erro ao carregar carrinho");
            return "error";
        }
    }

    @PostMapping("/add")
    public String addToCart(@RequestParam Long vehicleId, 
                          HttpSession session,
                          RedirectAttributes redirectAttributes) {
        try {
            restTemplate.postForObject(
                COMMERCE_SERVICE_URL + "/api/cart/add?vehicleId=" + vehicleId,
                null,
                Object.class
            );
            return "redirect:/cart";
        } catch (Exception e) {
            redirectAttributes.addFlashAttribute("error", "Erro ao adicionar ao carrinho");
            return "redirect:/vehicles";
        }
    }

    @PostMapping("/remove")
    public String removeFromCart(@RequestParam Long vehicleId,
                               HttpSession session) {
        restTemplate.postForObject(
            COMMERCE_SERVICE_URL + "/api/cart/remove?vehicleId=" + vehicleId,
            null,
            Object.class
        );
        return "redirect:/cart";
    }

    @PostMapping("/checkout")
    public String checkout(HttpSession session) {
        try {
            restTemplate.postForObject(
                COMMERCE_SERVICE_URL + "/api/cart/checkout",
                null,
                Object.class
            );
            return "redirect:/cart";
        } catch (Exception e) {
            return "redirect:/cart";
        }
    }
} ::::::::::::::
./src/main/java/com/example/ui/security/RoleSecurityInterceptor.java
::::::::::::::
package com.example.ui.security;

import jakarta.servlet.http.HttpServletRequest;
import jakarta.servlet.http.HttpServletResponse;
import jakarta.servlet.http.HttpSession;
import org.springframework.stereotype.Component;
import org.springframework.web.servlet.HandlerInterceptor;

@Component
public class RoleSecurityInterceptor implements HandlerInterceptor {

    @Override
    public boolean preHandle(HttpServletRequest request, 
                           HttpServletResponse response, 
                           Object handler) throws Exception {
        
        String requestPath = request.getRequestURI();
        
        // Verifica se é uma rota que requer perfil de vendedor
        if (requestPath.startsWith("/users")) {
            HttpSession session = request.getSession(false);
            String role = (String) session.getAttribute("role");
            
            if (!"VENDEDOR".equals(role)) {
                response.sendRedirect("/vehicles");
                return false;
            }
        }
        
        return true;
    }
} ::::::::::::::
./src/main/java/com/example/ui/security/SecurityInterceptor.java
::::::::::::::
package com.example.ui.security;

import jakarta.servlet.http.HttpServletRequest;
import jakarta.servlet.http.HttpServletResponse;
import jakarta.servlet.http.HttpSession;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.stereotype.Component;
import org.springframework.web.servlet.HandlerInterceptor;

import java.util.Arrays;
import java.util.List;

@Component
public class SecurityInterceptor implements HandlerInterceptor {

    private static final List<String> PUBLIC_PATHS = Arrays.asList(
        "/login", "/register", "/css/", "/js/", "/images/"
    );

    @Value("${spring.profiles.active:dev}")
    private String activeProfile;

    @Override
    public boolean preHandle(HttpServletRequest request,
                              HttpServletResponse response,
                              Object handler) throws Exception {

        String requestPath = request.getRequestURI();

        // Ambiente de desenvolvimento: liberar tudo
        if ("dev".equalsIgnoreCase(activeProfile)) {
            return true;
        }

        // Ambiente de produção: checar autenticação
        if (isPublicPath(requestPath)) {
            return true;
        }

        HttpSession session = request.getSession(false);
        if (session == null || session.getAttribute("token") == null) {
            response.sendRedirect("/login");
            return false;
        }

        return true;
    }

    private boolean isPublicPath(String path) {
        return PUBLIC_PATHS.stream().anyMatch(path::startsWith);
    }
}
::::::::::::::
./src/main/java/com/example/ui/UiServiceApplication.java
::::::::::::::
package com.example.ui;

import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;

/**
 * Serviço de Interface com Usuário (UI Service)
 * ==========================================
 * 
 * Responsável pela interface web do sistema, gerenciando todas as
 * interações com o usuário final.
 * 
 * Páginas Principais:
 * -----------------
 * 1. Login e Registro
 *    - Formulário de login
 *    - Cadastro de novos usuários
 * 
 * 2. Catálogo de Veículos
 *    - Listagem com filtros
 *    - Detalhes do veículo
 *    - Fotos e especificações
 * 
 * 3. Carrinho de Compras
 *    - Visualização de itens
 *    - Timer de expiração
 *    - Processo de checkout
 * 
 * Integrações:
 * -----------
 * - Auth Service: Login e segurança
 * - Commerce Service: Dados de negócio
 */
@SpringBootApplication
public class UiServiceApplication {
    public static void main(String[] args) {
        SpringApplication.run(UiServiceApplication.class, args);
    }
} ::::::::::::::
./src/main/java/com/example/ui/config/SecurityConfig.java
::::::::::::::
package com.example.ui.config;

import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.context.annotation.Profile;
import org.springframework.security.config.annotation.web.builders.HttpSecurity;
import org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;
import org.springframework.security.web.SecurityFilterChain;

@Configuration
@EnableWebSecurity
public class SecurityConfig {

    public SecurityConfig() {
        // Construtor privado para evitar instância
    }

    @Configuration
    @Profile("dev")
    static class DevSecurityConfig {
        @Bean
        public SecurityFilterChain devFilterChain(HttpSecurity http) throws Exception {
            http
                .authorizeHttpRequests(authz -> authz
                    .requestMatchers("/**").permitAll() // Libera tudo no dev
                )
                .csrf(csrf -> csrf.disable());
            return http.build();
        }
    }

    @Configuration
    @Profile("prod")
    static class ProdSecurityConfig {
        @Bean
        public SecurityFilterChain prodFilterChain(HttpSecurity http) throws Exception {
            http
                .authorizeHttpRequests(authz -> authz
                    .requestMatchers("/login", "/error", "/css/**").permitAll()
                    .requestMatchers("/vehicles/**", "/vehicle/**").authenticated()
                    .requestMatchers("/cart/**", "/user/**").authenticated()
                    .anyRequest().authenticated()
                )
                .formLogin(form -> form
                    .loginPage("/login")
                    .permitAll()
                )
                .logout(logout -> logout.permitAll());
            return http.build();
        }
    }
}
::::::::::::::
./src/main/java/com/example/ui/config/WebClientConfig.java
::::::::::::::
package com.example.ui.config;

import org.springframework.beans.factory.annotation.Value;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.web.reactive.function.client.WebClient;

@Configuration
public class WebClientConfig {

    @Value("${service.auth.url}")
    private String authServiceUrl;

    @Value("${service.commerce.url}")
    private String commerceServiceUrl;

    @Bean
    public WebClient authWebClient() {
        return WebClient.builder()
                .baseUrl(authServiceUrl)
                .build();
    }

    @Bean
    public WebClient commerceWebClient() {
        return WebClient.builder()
                .baseUrl(commerceServiceUrl)
                .build();
    }
} ::::::::::::::
./src/main/java/com/example/ui/config/WebMvcConfig.java
::::::::::::::
package com.example.ui.config;

import com.example.ui.security.SecurityInterceptor;
import lombok.RequiredArgsConstructor;
import org.springframework.context.annotation.Configuration;
import org.springframework.web.servlet.config.annotation.InterceptorRegistry;
import org.springframework.web.servlet.config.annotation.WebMvcConfigurer;

@Configuration
@RequiredArgsConstructor
public class WebMvcConfig implements WebMvcConfigurer {

    private final SecurityInterceptor securityInterceptor;

    @Override
    public void addInterceptors(InterceptorRegistry registry) {
        registry.addInterceptor(securityInterceptor);
    }
} ::::::::::::::
./src/main/java/com/example/ui/config/WebConfig.java
::::::::::::::
/**
 * Configuração Web
 * ==============
 * 
 * Configurações da camada web do sistema.
 * 
 * Aspectos Configurados:
 * -------------------
 * 1. Segurança
 *    - CORS (Cross-Origin Resource Sharing)
 *    - CSRF (Cross-Site Request Forgery)
 *    - Headers de segurança
 * 
 * 2. Sessão
 *    - Timeout
 *    - Persistência
 *    - Cookies
 * 
 * 3. Recursos Estáticos
 *    - Cache
 *    - Compressão
 *    - Versionamento
 */ ::::::::::::::
./src/main/java/com/example/ui/service/AuthUIService.java
::::::::::::::
package com.example.ui.service;

import com.example.ui.dto.LoginRequest;
import com.example.ui.dto.RegisterRequest;
import lombok.RequiredArgsConstructor;
import org.springframework.stereotype.Service;
import org.springframework.web.reactive.function.client.WebClient;
import reactor.core.publisher.Mono;

import java.util.Map;

@Service
@RequiredArgsConstructor
public class AuthUIService {
    
    private final WebClient authWebClient;

    public Mono<Map> login(LoginRequest request) {
        return authWebClient.post()
                .uri("/api/auth/authenticate")
                .bodyValue(request)
                .retrieve()
                .bodyToMono(Map.class);
    }

    public Mono<Map> register(RegisterRequest request) {
        return authWebClient.post()
                .uri("/api/auth/register")
                .bodyValue(request)
                .retrieve()
                .bodyToMono(Map.class);
    }
} ::::::::::::::
./src/main/java/com/example/ui/service/VehicleUIService.java
::::::::::::::
package com.example.ui.service;

import lombok.RequiredArgsConstructor;
import org.springframework.stereotype.Service;
import org.springframework.web.reactive.function.client.WebClient;
import reactor.core.publisher.Mono;

import java.util.List;
import java.util.Map;

@Service
@RequiredArgsConstructor
public class VehicleUIService {

    private final WebClient commerceWebClient;

    public Mono<List> getAvailableVehicles(String token) {
        return commerceWebClient.get()
                .uri("/api/vehicles/available")
                .header("Authorization", "Bearer " + token)
                .retrieve()
                .bodyToMono(List.class);
    }

    public Mono<Map> getVehicleDetails(Long id, String token) {
        return commerceWebClient.get()
                .uri("/api/vehicles/" + id)
                .header("Authorization", "Bearer " + token)
                .retrieve()
                .bodyToMono(Map.class);
    }
} ::::::::::::::
./src/main/java/com/example/ui/service/CartUIService.java
::::::::::::::
package com.example.ui.service;

import lombok.RequiredArgsConstructor;
import org.springframework.stereotype.Service;
import org.springframework.web.reactive.function.client.WebClient;
import reactor.core.publisher.Mono;

import java.util.Map;

@Service
@RequiredArgsConstructor
public class CartUIService {

    private final WebClient commerceWebClient;

    public Mono<Map> addToCart(Long vehicleId, String token) {
        return commerceWebClient.post()
                .uri("/api/cart/add/" + vehicleId)
                .header("Authorization", "Bearer " + token)
                .retrieve()
                .bodyToMono(Map.class);
    }

    public Mono<Map> getCart(String token) {
        return commerceWebClient.get()
                .uri("/api/cart")
                .header("Authorization", "Bearer " + token)
                .retrieve()
                .bodyToMono(Map.class);
    }

    public Mono<Map> checkout(String token) {
        return commerceWebClient.post()
                .uri("/api/cart/checkout")
                .header("Authorization", "Bearer " + token)
                .retrieve()
                .bodyToMono(Map.class);
    }
} ::::::::::::::
./src/main/java/com/example/ui/service/UserUIService.java
::::::::::::::
package com.example.ui.service;

import lombok.RequiredArgsConstructor;
import org.springframework.stereotype.Service;
import org.springframework.web.reactive.function.client.WebClient;
import reactor.core.publisher.Mono;

import java.util.List;

@Service
@RequiredArgsConstructor
public class UserUIService {

    private final WebClient authWebClient;

    public Mono<List> getAllUsers(String token) {
        return authWebClient.get()
                .uri("/api/users")
                .header("Authorization", "Bearer " + token)
                .retrieve()
                .bodyToMono(List.class);
    }
} ::::::::::::::
./src/main/java/com/example/ui/exception/GlobalExceptionHandler.java
::::::::::::::
package com.example.ui.exception;

import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.ControllerAdvice;
import org.springframework.web.bind.annotation.ExceptionHandler;
import org.springframework.web.reactive.function.client.WebClientResponseException;

@ControllerAdvice
public class GlobalExceptionHandler {

    @ExceptionHandler(WebClientResponseException.class)
    public String handleWebClientResponseException(WebClientResponseException ex, Model model) {
        model.addAttribute("error", "Erro ao comunicar com o serviço: " + ex.getMessage());
        return "error";
    }

    @ExceptionHandler(Exception.class)
    public String handleGenericException(Exception ex, Model model) {
        model.addAttribute("error", "Ocorreu um erro: " + ex.getMessage());
        return "error";
    }
} ::::::::::::::
./src/main/java/com/example/ui/dto/LoginRequest.java
::::::::::::::
package com.example.ui.dto;

import jakarta.validation.constraints.NotBlank;
import lombok.Data;

@Data
public class LoginRequest {
    @NotBlank(message = "Login é obrigatório")
    private String login;
    
    @NotBlank(message = "Senha é obrigatória")
    private String password;
} ::::::::::::::
./src/main/java/com/example/ui/dto/RegisterRequest.java
::::::::::::::
package com.example.ui.dto;

import jakarta.validation.constraints.NotBlank;
import lombok.Data;

@Data
public class RegisterRequest {
    @NotBlank(message = "Login é obrigatório")
    private String login;
    
    @NotBlank(message = "Senha é obrigatória")
    private String password;
    
    @NotBlank(message = "Nome é obrigatório")
    private String name;
    
    @NotBlank(message = "CPF é obrigatório")
    private String cpf;
    
    private String role;
} 